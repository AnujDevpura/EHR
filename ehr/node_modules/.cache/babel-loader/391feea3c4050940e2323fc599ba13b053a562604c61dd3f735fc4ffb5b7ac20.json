{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anujd\\\\DTL\\\\ehr\\\\src\\\\components\\\\metamask.js\",\n  _s = $RefreshSig$();\n// MetaMaskConnect.js\nimport React, { useState } from 'react';\nimport { ethers } from 'ethers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MetaMaskConnect = () => {\n  _s();\n  const [account, setAccount] = useState(null);\n  const [error, setError] = useState(null);\n\n  // Function to handle MetaMask connection\n  const connectMetaMask = async () => {\n    if (window.ethereum) {\n      try {\n        // Requesting accounts from MetaMask\n        const accounts = await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n\n        // Set the connected account\n        setAccount(accounts[0]);\n\n        // Create a provider and signer\n        const provider = new ethers.BrowserProvider(window.ethereum);\n        const signer = await provider.getSigner();\n        console.log('Connected with signer:', signer);\n\n        // You can also get the current network\n        const network = await provider.getNetwork();\n        console.log('Network:', network);\n      } catch (err) {\n        setError(err.message);\n        console.error('Error connecting to MetaMask:', err);\n      }\n    } else {\n      alert('MetaMask is not installed!');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"MetaMask Connection\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), account ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Connected Account: \", account]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: connectMetaMask,\n        children: \"Connect MetaMask\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(MetaMaskConnect, \"zOkW/xWLL6lCYwYfvgR74gLViJk=\");\n_c = MetaMaskConnect;\nexport default MetaMaskConnect;\nvar _c;\n$RefreshReg$(_c, \"MetaMaskConnect\");","map":{"version":3,"names":["React","useState","ethers","jsxDEV","_jsxDEV","MetaMaskConnect","_s","account","setAccount","error","setError","connectMetaMask","window","ethereum","accounts","request","method","provider","BrowserProvider","signer","getSigner","console","log","network","getNetwork","err","message","alert","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","style","color","_c","$RefreshReg$"],"sources":["C:/Users/anujd/DTL/ehr/src/components/metamask.js"],"sourcesContent":["// MetaMaskConnect.js\r\nimport React, { useState } from 'react';\r\nimport { ethers } from 'ethers';\r\n\r\nconst MetaMaskConnect = () => {\r\n  const [account, setAccount] = useState(null);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Function to handle MetaMask connection\r\n  const connectMetaMask = async () => {\r\n    if (window.ethereum) {\r\n      try {\r\n        // Requesting accounts from MetaMask\r\n        const accounts = await window.ethereum.request({\r\n          method: 'eth_requestAccounts',\r\n        });\r\n\r\n        // Set the connected account\r\n        setAccount(accounts[0]);\r\n\r\n        // Create a provider and signer\r\n        const provider = new ethers.BrowserProvider(window.ethereum);\r\n        const signer = await provider.getSigner();\r\n        console.log('Connected with signer:', signer);\r\n\r\n        // You can also get the current network\r\n        const network = await provider.getNetwork();\r\n        console.log('Network:', network);\r\n      } catch (err) {\r\n        setError(err.message);\r\n        console.error('Error connecting to MetaMask:', err);\r\n      }\r\n    } else {\r\n      alert('MetaMask is not installed!');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>MetaMask Connection</h1>\r\n      {account ? (\r\n        <div>\r\n          <p>Connected Account: {account}</p>\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <button onClick={connectMetaMask}>Connect MetaMask</button>\r\n        </div>\r\n      )}\r\n      {error && <p style={{ color: 'red' }}>Error: {error}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MetaMaskConnect;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,MAAM,QAAQ,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhC,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;;EAExC;EACA,MAAMU,eAAe,GAAG,MAAAA,CAAA,KAAY;IAClC,IAAIC,MAAM,CAACC,QAAQ,EAAE;MACnB,IAAI;QACF;QACA,MAAMC,QAAQ,GAAG,MAAMF,MAAM,CAACC,QAAQ,CAACE,OAAO,CAAC;UAC7CC,MAAM,EAAE;QACV,CAAC,CAAC;;QAEF;QACAR,UAAU,CAACM,QAAQ,CAAC,CAAC,CAAC,CAAC;;QAEvB;QACA,MAAMG,QAAQ,GAAG,IAAIf,MAAM,CAACgB,eAAe,CAACN,MAAM,CAACC,QAAQ,CAAC;QAC5D,MAAMM,MAAM,GAAG,MAAMF,QAAQ,CAACG,SAAS,CAAC,CAAC;QACzCC,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEH,MAAM,CAAC;;QAE7C;QACA,MAAMI,OAAO,GAAG,MAAMN,QAAQ,CAACO,UAAU,CAAC,CAAC;QAC3CH,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEC,OAAO,CAAC;MAClC,CAAC,CAAC,OAAOE,GAAG,EAAE;QACZf,QAAQ,CAACe,GAAG,CAACC,OAAO,CAAC;QACrBL,OAAO,CAACZ,KAAK,CAAC,+BAA+B,EAAEgB,GAAG,CAAC;MACrD;IACF,CAAC,MAAM;MACLE,KAAK,CAAC,4BAA4B,CAAC;IACrC;EACF,CAAC;EAED,oBACEvB,OAAA;IAAAwB,QAAA,gBACExB,OAAA;MAAAwB,QAAA,EAAI;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAC3BzB,OAAO,gBACNH,OAAA;MAAAwB,QAAA,eACExB,OAAA;QAAAwB,QAAA,GAAG,qBAAmB,EAACrB,OAAO;MAAA;QAAAsB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChC,CAAC,gBAEN5B,OAAA;MAAAwB,QAAA,eACExB,OAAA;QAAQ6B,OAAO,EAAEtB,eAAgB;QAAAiB,QAAA,EAAC;MAAgB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxD,CACN,EACAvB,KAAK,iBAAIL,OAAA;MAAG8B,KAAK,EAAE;QAAEC,KAAK,EAAE;MAAM,CAAE;MAAAP,QAAA,GAAC,SAAO,EAACnB,KAAK;IAAA;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrD,CAAC;AAEV,CAAC;AAAC1B,EAAA,CAhDID,eAAe;AAAA+B,EAAA,GAAf/B,eAAe;AAkDrB,eAAeA,eAAe;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}